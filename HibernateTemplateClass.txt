Methods in HibernateTemplate class
----------------------------------
1)	void persist(Object entity)	
		persists the given object.

2)	Serializable save(Object entity)	
		persists the given object and returns id.

3)	void saveOrUpdate(Object entity)	
		persists or updates the given object. If id is found, it updates the record otherwise saves the record.

4)	void update(Object entity)	
		updates the given object.

5)	void delete(Object entity)	
		deletes the given object on the basis of id.

6)	Object get(Class entityClass, Serializable id)	
		returns the persistent object on the basis of given id.

7)	Object load(Class entityClass, Serializable id)	
		returns the persistent object on the basis of given id.

8)	List loadAll(Class entityClass)	
		returns the all the persistent objects.


To integrate the spring and hibernate we have to map the following objects
in xml file

1. BasicDataSource : To provide the informaion database 
2. LocalSessionFactoryBean : For mapping resources and hibernate mapping
3. HibernateTemplate: For creating the SessionFactory method.




employee.hbm.xml
----------------
<?xml version='1.0' encoding='UTF-8'?>  
<!DOCTYPE hibernate-mapping PUBLIC  
"-//Hibernate/Hibernate Mapping DTD 3.0//EN"  
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">  
  
<hibernate-mapping>  
<class name="Employee" table="emp">  
          <id name="id">  
          <generator class="assigned"></generator>  
          </id>  
            
          <property name="name"></property>  
          <property name="salary"></property>  
</class>  
            
</hibernate-mapping>



 
import org.springframework.orm.hibernate3.HibernateTemplate;  
import java.util.*; 
 
public class EmployeeDao {  
	HibernateTemplate template;  
	public void setTemplate(HibernateTemplate template) {  
  		  this.template = template;  
	}  
	//method to save employee  
	public void saveEmployee(Employee e){  
   		 template.save(e);  
	}  
	//method to update employee  
	public void updateEmployee(Employee e){  
    		template.update(e);  
	}  
	//method to delete employee  
	public void deleteEmployee(Employee e){  
    		template.delete(e);  
	}  
	//method to return one employee of given id  
	public Employee getById(int id){  
   		 Employee e=(Employee)template.get(Employee.class,id);  
   		 return e;  
	}  
	//method to return all employees  
	public List<Employee> getEmployees(){  
  		  List<Employee> list=new ArrayList<Employee>();  
   		 list=template.loadAll(Employee.class);  
   		 return list;  
	}  
}  


applicationContext.xml
----------------------

<?xml version="1.0" encoding="UTF-8"?>  
<beans  
    xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:p="http://www.springframework.org/schema/p"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">  
  
  
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">  
        <property name="driverClassName"  value="oracle.jdbc.driver.OracleDriver"></property>  
        <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"></property>  
        <property name="username" value="system"></property>  
        <property name="password" value="oracle"></property>  
    </bean>  
      
    <bean id="mysessionFactory"  class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">  
        <property name="dataSource" ref="dataSource"></property>  
          
        <property name="mappingResources">  
        <list>  
        <value>employee.hbm.xml</value>  
        </list>  
        </property>  
          
        <property name="hibernateProperties">  
            <props>  
                <prop key="hibernate.dialect">org.hibernate.dialect.Oracle9Dialect</prop>  
                <prop key="hibernate.hbm2ddl.auto">update</prop>  
                <prop key="hibernate.show_sql">true</prop>  
                  
            </props>  
        </property>  
    </bean>  
      
    <bean id="template" class="org.springframework.orm.hibernate3.HibernateTemplate">  
    <property name="sessionFactory" ref="mysessionFactory"></property>  
    </bean>  
      
    <bean id="d" class="com.javatpoint.EmployeeDao">  
    <property name="template" ref="template"></property>  
    </bean>  
      
      
    </beans>  

InsertTest.java
---------------
import org.springframework.beans.factory.BeanFactory;  
import org.springframework.beans.factory.xml.XmlBeanFactory;  
import org.springframework.core.io.ClassPathResource;  
import org.springframework.core.io.Resource;  
  
public class InsertTest {  
public static void main(String[] args) {  
      
    Resource r=new ClassPathResource("applicationContext.xml");  
    BeanFactory factory=new XmlBeanFactory(r);  
      
    EmployeeDao dao=(EmployeeDao)factory.getBean("d");  
      
    Employee e=new Employee();  
    e.setId(114);  
    e.setName("Arun");  
    e.setSalary(5000);  
      
    dao.saveEmployee(e);  
      
}  
}  